void tree_electron()
{

	// build a TTree and connect the variables to the branch
	TTree *e_start = new TTree("e_start","electrons occur");
	double x0,y0,z0,t0,e0;
	e_start->Branch("x0",&x0,"x0/D");
	e_start->Branch("y0",&y0,"y0/D");
	e_start->Branch("z0",&z0,"z0/D");
	e_start->Branch("t0",&t0,"t0/D");
	e_start->Branch("e0",&e0,"e0/D");

	// open the electron_start ASCII file and fill the tree
	TString fFilename1 = "avalanche_start.out";
	ifstream f_start(fFilename1);
	while (!f_start.eof())
	{ 
		f_start>>x0; f_start>>y0; f_start>>z0; f_start>>t0; f_start>>e0;
		e_start->Fill();
	}
	f_start.close();
	
	
	// build a TTree and connect the variables to the branch
	TTree *e_end = new TTree("e_end","electons disappear");
	double x,y,z,t,e;
	int status;
	e_end->Branch("x",&x,"x/D");
	e_end->Branch("y",&y,"y/D");
	e_end->Branch("z",&z,"z/D");
	e_end->Branch("t",&t,"t/D");
	e_end->Branch("e",&e,"e/D");
	e_end->Branch("status",&status,"status/I");

	// open the electron_end ASCII file and fill the tree
	TString fFilename2 = "avalanche_end.out";
	ifstream f_end(fFilename2);
	while (!f_end.eof())
	{ 
		f_end>>x; f_end>>y; f_end>>z; f_end>>t; f_end>>e; f_end>>status;
		e_end->Fill();
	}
	f_end.close();

	// check what the trees look like and save them
	TFile *f = new TFile("e_tree.root","RECREATE");
	e_start->Print();
	e_start->Write();
	e_end->Print();
	e_end->Write();
	f->Write();	
	
}	
	
